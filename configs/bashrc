#!/usr/bin/env sh

# NOT JUST BASH
# ALSO FOR ZSH

# ============
# ENVIRONMENT & PATH CHANGES

# ADDITIONAL BINARIES
export PATH="/usr/local/bin:/usr/local/sbin:~/bin:$PATH"
export PATH=$PATH:/usr/local/sbin
if [[ ! '.rvm/bin' =~ $PATH ]]; then
  export PATH=$PATH:$HOME/.rvm/bin
fi
#export PATH=/Users/alexv/.rvm/gems/ruby-1.9.3-p125/bin:/Users/alexv/.rvm/gems/ruby-1.9.3-p125@global/bin:/Users/alexv/.rvm/rubies/ruby-1.9.3-p125/bin:/Users/alexv/.rvm/bin:/usr/local/bin:/usr/local/sbin:~/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:/Users/alexv/.rvm/bin:/Users/alexv/.rvm/bin
if [[ ! $PATH =~ '/usr/local/bin' ]]; then
  export PATH=/usr/local/bin:$PATH
fi
if [[ ! $PATH =~ '/usr/local/sbin' ]]; then
  export PATH=/usr/local/sbin:$PATH
fi
export PATH=$PATH:/Users/`whoami`/Sites/kriogenx/scripts/bin

# Xcode Developer
if [[ -e /Applications/Xcode.app/Contents/Developer ]]; then
  #export PATH=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin:/Applications/Xcode.app/Contents/Developer/usr/bin:$PATH
fi

# GCC
if [[ -e /usr/local/bin/gcc-4.2 ]]; then
  export CC=/usr/local/bin/gcc-4.2
fi
export CPPFLAGS=-I/opt/X11/include

# RVM SETTINGS before shell so shell knows
if test -f ~/.rvm/scripts/rvm; then
  [ "$(type rvm)" = "rvm is a shell function" ] || source ~/.rvm/scripts/rvm

  export rvm_trust_rvmrcs_flag=1
  export rvm_project_rvmrc_default=1
  export rvm_auto_reload_flag=2
fi

# ZSH SETTINGS
if [ -n "$ZSH_VERSION" ]; then
  # ZSH THEME
  if [[ -d ~/.oh-my-zsh ]]; then
    DISABLE_UPDATE_PROMPT=true
    # ZSH rvm theme support
    #source ~/.rvm/scripts/rvm

    ZSH=$HOME/.oh-my-zsh # oh-my-zsh config
    ZSH_THEME="kriogenx" # ~/.oh-my-zsh/themes/

    plugins=(git rvm fasd rake rails) # ~/.oh-my-zsh/custom/plugins/
    source $ZSH/oh-my-zsh.sh
  fi

  # Remove Autocorrect
  unsetopt correct_all
  unsetopt correct

# Bash
elif [ -n "$BASH_VERSION" ]; then

  function rvm_prompt_info() {
    if [[ -e ~/.rvm/bin/rvm-prompt ]]; then
      ruby_version=$(~/.rvm/bin/rvm-prompt 2> /dev/null) || return
      [[ ! -z $ruby_version ]] && echo -en "\033[0m <$ruby_version>"
    fi
  }

  function git_prompt_info() {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    branch=${ref#ref/heads/}
    echo -en " \033[0m""${ref#refs/heads/}" #$(parse_git_dirty)"
    if [[ -n $(git status -s ${SUBMODULE_SYNTAX}  2> /dev/null) ]]; then
      echo -en "\033[31m✘✘✘"
    else
      echo -en "\033[32m✔"
    fi
  }

  bind '"\ep": history-search-backward'
  bind '"\en": history-search-forward'
  bind '"\C-w": backward-kill-word'

  # Colorize Prompt
  [ -z "$PS1" ] || stty -ixon

  # Kriogenx Theme
  #[ -z "$PS1" ] || export PS1="╭─ \[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]\$(git_prompt_info '(%s)')$ "
  [ -z "$PS1" ] || export PS1="╭─ \[\033[01;36m\]\w\[\033[00m\]\$(git_prompt_info '(%s)')\$(rvm_prompt_info)\033[0m\n╰─ "
fi

# Postgres
export PGDATA=/usr/local/var/postgres

# =============
# ALIASES

# Bash Defaults
alias lns="ln -s"

# builtin apps
alias vi='vim'
alias svi='sudo vim'
alias rmf='rm -rf'
alias srmf='sudo rm -rf'
#alias grep='grep --color=auto --exclude="*~"'
grp() {
  grep -irn $1 . --color=auto --exclude="*~"
}
egrp() {
  egrep -rn $1 .
}
fnd() {
  find . -name "*$1*"
}

# Kriogenx
alias krc='vi ~/Sites/kriogenx/scripts/configs/bashrc'
alias kd='cd ~/Sites/kriogenx'
alias kds='cd ~/Sites/kriogenx/scripts'
alias kgig='cp ~/Sites/kriogenx/scripts/support/git/gitignore ./.gitignore'
# Kriogenx Directory Update

# Traversing
si() {
  cd "$HOME/Sites/$1"
}
alias c='clear'
#alias ci="cd ~/Clients"

# navigation
alias l='ls -l'
alias ll='ls -l'
alias la='ls -lAh'   #Show all, sort by extension
alias lll='ls -lAh'
alias lt="ls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'"
alias ltl="lt | less"
cl() {
  cd $1; ls -l
}
mkd() {
  mkdir $1
  cd $1
}
alias ds='du -hd 1'

# Print Path
alias ppath='echo $PATH | tr ':' "\n"'

# TextEdit
alias edi='open -e "$1"'

# SSH
alias sshcopy='pbcopy < ~/.ssh/id_rsa.pub; echo "Copied ssh key into clipboard"'

# Dropbox
alias dropboxpurge="rm -rf ~/Dropbox/.dropbox.cache; echo Dropbox cache deleted"

##############
# RAILS
alias rrvm='vi .rvmrc'
alias rcuc='cd `rr`; cucumber features'
alias rversions="gem list -ra rails | grep 'rails ('"
alias rgems='rvm list gemsets; cat .rvmrc'
alias rgemsdir='cd `rvm gemdir`/gems'
alias rvdgems'rvm gemset empty'
alias rgem='vi `rr`/Gemfile'
alias rgemsuninstall='gem list | cut -d" " -f1 | xargs gem uninstall -aIx'
alias rgembuild='gem pristine --all --no-extensions'
alias rlog='tail -f `rr`/log/development.log'
alias rtlog='tail -f `rr`/log/test.log'
alias rb='ruby'
rr() { # rails root
  (
    dir=${1:-$(pwd)}
    i=0
    while [ "/" != "$dir" -a "$i" -ne 16 ]; do
      if [ -f "$dir/config/environment.rb" ]; then
        echo "$dir"
        return 0
      fi
      dir="$(dirname "$dir")"
      i=$(expr $i + 1)
    done
    return 1
  )
}
rsc() {
  if [[ -f "`rr`/script/rails" ]]; then
    `rr`/script/rails console
  elif [[ -f "`rr`/script/console" ]]; then
    `rr`/script/console
  else
    rails c
  fi
}
rss() {
  if [[ -f "`rr`/script/rails" ]]; then
    S="rails server"
  elif [[ -f "`rr`/script/server" ]]; then
    S="`rr`/script/server"
  else
    S="rails s"
  fi
  if [[ -n $1 ]]; then
    eval "$S -p '$1'"
  else
    eval "$S"
  fi
}
alias rss1='rss 3001'
alias rss2='rss 3002'
alias rss3='rss 3003'

# cake
alias cake='app/Console/cake'

# vendor apps
alias tiga='tig --all'
alias tigs='tig status'

# Web Server
alias ports='netstat -tulanp'
webports() {
  ps auxwww | grep LISTEN
  netstat -a | egrep 'Proto|LISTEN'
  lsof -i tcp:80
  lsof -i tcp:8080
  lsof -i tcp:3000
}
alias wsports='webports'

# apache
alias asites='sudo vi /etc/apache2/extra/httpd-vhosts.conf; sudo vi /etc/hosts; sudo apachectl restart'
alias adsites='sudo vi ~/Dropbox/Office/settings/apache/sites.conf; sudo vi /etc/hosts; sudo apachectl restart'
alias astart='sudo apachectl restart'
alias astop='sudo apachectl stop'
alias alog="tail -f /private/var/log/apache2/error_log"

# Nginx
alias ngsites='vi /usr/local/etc/nginx/nginx.conf'
alias ngstart='sudo nginx'
alias ngstop='sudo nginx -s quit'

# mysql
#alias mysql=/usr/local/mysql/bin/mysql
#alias mysqladmin=/usr/local/mysql/bin/mysqladmin
alias mss='mysql.server start'
alias mystart='mysql.server start'
alias myrestart='mysql.server restart'
alias mystop='mysql.server stop'

# cucumber
alias cuc='cucumber'

# postgres
#alias pg-start='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
#alias pg-stop='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
alias pgstart='pg_ctl start'
alias pgstop='pg_ctl stop'
pgenv() {
  echo "PGDATA:    $PGDATA"
}

# git
alias ga='git add .; git add -u .; git status'
alias gai='git add -i; git status'
alias gap='git add -p'

alias gc='git commit -v -m'
alias gca='git commit --amend'

alias gcl="git clone"
alias gco="git checkout"
alias go="git checkout"
alias gom="git checkout master"
alias gol="git checkout @\{-1\}" # checkout last branch
gob() { # go back a branch
  git checkout @\{-"$1"\}
}
alias gb='git branch'
alias gbd='git branch -d' # delete
alias gbdd='git branch -D' # delete!
# delete remote
gbdr() {
  git push origin ":$1"
}
# delete all
gbda() {
  gbd $1; gbdr $1
}
alias gbdall='git branch --merged | grep -v "\*" | xargs -n 1 git branch -d' # delete all merged branches
alias gbnm="git branch -r --no-merged master | sed 's/^  origin\///g'" # show unmerged branches
alias gbp='git prune -v'
alias gba='git branch -a' # all branches
alias gbr='git branch -r' # remote branches
alias gbc="git branch --no-color | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'" # branch current
alias gbum="git branch --no-merge" # unmerged
alias gbo='git checkout -b'
gbu() {
  gbo "$1"
  git push -u origin "$1"
}
gbt() {
  git branch -t "$1" origin/"$1"; #origin/"$1";
  git checkout "$1"
}

alias gtg='git tag'
alias gts='git show'
alias gtp='git push --tags'
gtdr() { # DELETE REMOTE TAG
  git push origin :refs/tags/$1
}

# status / diffs
alias gs='git status'
alias gd='git diff'
alias gds='git diff --staged'
alias gdc='git diff --cached'
alias gad='ga; gds'
alias gdl="git show" # diff last changes
alias gdh='git diff HEAD'
alias gdm='git diff master'
alias gsha='git log | head -1'

# logging - glo
alias glod='git log --oneline --decorate'
alias glop='git log -p'
alias glol='git log --graph --decorate --pretty=oneline --abbrev-commit'
alias glola='git log --graph --decorate --pretty=oneline --abbrev-commit --all'
alias glodd='git log --pretty=format:"%h%x09%an%x09%ad%x09%s"'
alias glodr='git log --pretty=format:"%h%x09%an%x09%ad%x09%s" --date=relative'
alias gls='git ls-files'
alias glgn='ls-files -o -i --exclude-standard' # Show files ignored by git:
alias glc="git cherry -v master" #show changes in branch not merged
alias gcp="git cherry-pick"

# git push/pull
alias gp='git push'
alias gpa='git push --all'
alias gpu='git push -u'
alias gpo='git push -u origin `gbc`'
alias gl='git pull'
alias gla='git pull -v --all'
glu() {
  git branch --set-upstream $1 "origin/$1"
}
alias glr='git pull --rebase'
alias glm="gom; gl; gol; gl"
alias gr='git rebase'
alias grc='git rebase --continue'
alias grc='git rebase --skip'
alias gra='git rebase --abort'
alias gnc='glr; gpa'

alias gst='git stash show'
alias gss='git stash save'
alias gsa='git stash apply'
alias gsc='git stash clear'
alias gsn='ga; gss; glr; gsa'

alias gm='git merge'
alias gmt='git mergetool'
alias gmf='git merge --no-commit --no-ff -v'
alias gmm='git merge master'

# ignore file
alias gig="vi .gitignore"
alias gigi="git update-index --assume-unchanged" # then filename, used for ignoring changes to a file locally
alias gigu="git update-index --no-assume-unchanged" # then filename, used for ignoring changes to a file locally

alias gr='git revert'
alias gcundo='git reset --hard HEAD~1' # undo last commit
alias gsundo=' git reset --soft HEAD^'
alias grundo='git revert HEAD~1 -n' #undo commit changes, leaving commit alone
gundo() {
  if [ ! $1 -gt 1 ]; then $1=1; fi
  git revert -n HEAD~r$1
}

# Git Submodules
alias gsm='git submodule add'
alias gsl='git submodule foreach git pull origin master'
alias gsu="git submodule update --init; git submodule update"

alias gclr='git add .; git add -u; git checkout -f'
alias gconf='vi .git/config'
alias ggconf='vi ~/.gitconfig'
alias gfix='git gc; git repack; git fsck --full --progress'

gsearch() {
  git grep $1 $(git rev-list --all)
}

# tar compress
tarc() {
  a=${1%.*}'.tar.gz'
  /usr/bin/tar cvf $a $1 ;
}

rsnc() {
  a=${1%.*}'/'
  rsync -avzr --stats --progress --exclude ".svn" "$a" "$2"
}
# copy sync
cps() {
  a=${1%.*}'/'
  rsync -avzur --stats --progress --exclude ".svn" "$a" "$2"
}

syn() {
  a=${1%.*}'/'
  rsync -avzur --stats --progress --exclude ".svn" --delete "$a" "$2"
}


# remove svn and dw files
cleanup() {
  find . -name '.svn' -type d -print0 | xargs -0 -t rm -rf
  find . -name '_notes' -type d -print0 | xargs -0 -t rm -rf
  find . -name '_vti_cnf' -type d -print0 | xargs -0 -t rm -rf
  find . -name '.DS_Store' -print0 | xargs -0 -t rm -rf
}

# go up directories looking for $1
dirup() {
  dir=${1:-$(pwd)}
  i=0
  while [ "/" != "$dir" -a "$i" -ne 16 ]; do
    if [ -f "$dir/$1" ]; then
      echo "$dir"
      return 0
    fi
    dir="$(dirname "$dir")"
    i=$(expr $i + 1)
  done
  return 1
}

k() {

  k_help(){
    echo "######## Kriogenx ########"
    echo ""
    echo "Apps:"
    echo "\e[0;36ma - apache\e[0m"
    echo "  s | start          Start Apache"
    echo "  q | quit           Stop Apache"
    echo "  r | restart        Restart Apache sites"
    echo "  t | status         Apache running status"
    echo "  l | log            Apache log"
    echo ""
    echo "\e[0;36mm - mysql\e[0m"
    echo "  s | start          Start MySQL"
    echo "  r | restart        Restart MySQL"
    echo "  q | quit           Stop MySQL"
    echo ""
    echo "\e[0;36mn - nginx\e[0m"
    echo "  s | start          Start"
    echo "  q | quit           Stop"
    echo "  c | config         Edit Config file"
    echo ""
    echo "\e[0;36mp - postgres\e[0m"
    echo "  s | start          Start"
    echo "  q | stop | quit    Stop"
    echo ""
    echo "Usage: k [appname] [command]"
    echo "  Example: k apache start"
    echo "  Example: k a s"
    echo ""
    echo "Apps:"
    echo "  apache, mysql, nginx, postgres, update"
    echo ""
    echo "Commands:"
    echo "  Commands generally include:"
    echo "  start, quit, restart, log, config"
  }

  A_SITES=(~/Sites/*)

  k_apache(){
    case "$2" in
      s|start)
        sudo apachectl restart;
        echo "\e[0;32m Apache Started";
        ;;
      r|restart)
        sudo apachectl restart;
        echo "\e[0;32m Apache Restarted";
        ;;
      q|quit|stop)
        sudo apachectl stop;
        echo "\e[0;32m Apache Stopped";
        ;;
      sites)
        if [[ -f ~/Dropbox/Office/settings/apache/sites.conf ]]; then
          sudo vi ~/Dropbox/Office/settings/apache/sites.conf;
        else
          sudo vi /etc/apache2/extra/httpd-vhosts.conf;
        fi
        sudo vi /etc/hosts;
        sudo apachectl restart;
        ;;
      c|conf|config)
        vi /etc/apache2/httpd.conf;
        ;;
      l|log)
        tail -f /private/var/log/apache2/error_log;
        ;;
      t|status)
        APACHE_STATUS=`ps ax | grep /usr/sbin/httpd | grep -v grep | cut -c1-5 | paste -s -`;
        echo -n "Apache is "
        if [[ -n $APACHE_STATUS ]]; then
          echo "running"
          echo $APACHE_STATUS
        else
          echo "not running"
        fi
        ;;
      i|installed)
        [[ ! `type apachectl` =~ 'not found' ]] && echo "true" || echo "false"
        ;;
    esac
  }

  k_mysql(){
    case "$2" in
      s|start)
        mysql.server start;
        ;;
      r|restart)
        mysql.server restart;
        ;;
      q|quit|stop)
        mysql.server stop;
        ;;
      i|installed)
        [[ ! `type mysql.server` =~ 'not found' ]] && echo "true" || echo "false"
        ;;
    esac
  }

  k_postgres(){
    case "$2" in
      s|start)
        pg_ctl start;
        ;;
      q|quit|stop)
        pg_ctl stop
        ;;
      t|status)
        echo "PGDATA:    $PGDATA"
        ;;
      i|installed)
        [[ ! `type pg_ctl` =~ 'not found' ]] && echo "true" || echo "false"
        ;;
    esac
  }

  k_nginx(){
    case "$2" in
      s|start)
        result=`sudo nginx`;
        if [[ -z $result ]]; then
          echo 'NGINX started'
        else
          echo 'NGINX failed to start'
        fi
        ;;
      q|quit|stop)
        result=`sudo nginx -s quit`;
        if [[ -z $result ]]; then
          echo 'NGINX quit'
        else
          echo 'NGINX failed to quit'
        fi
        ;;
      c|conf|config)
        vi /usr/local/etc/nginx/nginx.conf
        ;;
      i|installed)
        [[ ! `type nginx` =~ 'not found' ]] && echo "true" || echo "false"
        ;;
    esac
  }

  k_status() {
    if [[ `k apache i` == "true" ]]; then
     echo "Apache..............."`k a t`
    fi
    if [[ `k nginx i` == "true" ]]; then
     echo "Nginx................"`k n t`
    fi
    if [[ `k mysql i` == "true" ]]; then
     echo "Mysql................"`k m t`
    fi
    if [[ `k possgres i` == "true" ]]; then
     echo "Postgres............."`k p t`
    fi
  }

  k_update() {
    echo "Updating Kriogenx Scripts..."
    echo "$(kds; git pull --rebase -q)"
    # RVM
    if [[ `type rvm` =~ 'function' ]]; then
      rvm_latest=`curl -s https://raw.github.com/wayneeseguin/rvm/stable/VERSION`
      rvm_current=`rvm --version | tr -d '\n'`
      rvm_current=${rvm_current//rvm\ /}
      rvm_current=${rvm_current//\ */}
      rvm_message="RVM - Latest: $rvm_latest - Current: $rvm_current - "
      if [[ -z $rvm_latest ]]; then
        echo "$rvm_message""Could not get version"
      elif [[ $rvm_latest != $rvm_current ]]; then
        echo "$rvm_message""Upgrading..."
        rvm get latest
      else
        echo "$rvm_message""Already latest"
      fi
    fi
    # Brew
    if [[ ! `type brew` =~ 'not found' ]]; then
      echo "Upgrading Brew..."
      brew update
      brew upgrade
    fi
    # OH MY ZSH
    if [[ -d ~/.oh-my-zsh ]]; then
      echo "Upgrading OH-MY-ZSH..."
      echo $(cd ~/.oh-my-zsh; git pull --rebase -q; git submodule foreach git pull origin master)
    fi
  }

  # Top Wrapper
  case "$1" in
    a|apache) k_apache $@ ;;
    m|my|mysql) k_mysql $@ ;;
    n|ng|nginx) k_nginx $@ ;;
    p|pg|postgres) k_postgres $@ ;;
    s|status) k_status $@ ;;
    u|up|update|upgrade) k_update $@ ;;
    *) k_help ;;
  esac
}
kup() {
  k up
}
krepeat() {
  if [[ $2 -lt 2 || $2 -gt 1000 ]]; then
    exit 0
  fi
  i=0
  while [ "$i" -ne $2 ]; do
    eval "$1"
    i=$(expr $i + 1)
  done
}
