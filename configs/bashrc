#!/usr/bin/env sh

# Kriogenx Scripts
# FOR ZSH AND BASH
# scripts.kriogenx.net

# =====================
# SETTINGS

kriogenx_dir=~/Sites/kriogenx
kriogenx_rc="$kriogenx_dir"/scripts/configs/bashrc

user_rc=~/Dropbox/Office/settings/bashrc

# ====================
# ENVIRONMENT VARIABLES

# Homebrew GCC
if [[ `type CC` =~ 'not found' ]]; then
  if [[  -e /usr/local/bin/gcc-4.2 ]]; then
    export CC=/usr/local/bin/gcc-4.2
  elif [[ -e /usr/bin/gcc-4.2 ]]; then
    export CC=/usr/bin/gcc-4.2
  fi
fi
export CPPFLAGS=-I/opt/X11/include

# RVM SETTINGS before shell so shell knows
if [[ -f ~/.rvm/scripts/rvm ]]; then
  [[ `type rvm` =~ "function" ]] || source ~/.rvm/scripts/rvm

  export rvm_trust_rvmrcs_flag=1
  export rvm_project_rvmrc_default=1
  export rvm_auto_reload_flag=2
fi

# SET DEFAULT EDITOR
[[ -e /usr/bin/vim ]] && export EDITOR=/usr/bin/vim

# Postgres
if [[ -e /usr/local/var/postgres ]]; then
  export PGDATA=/usr/local/var/postgres
fi

# =====================
# PATH CHANGES

[[ -e ~/bin && ! $PATH =~ '~/bin' ]] && export PATH="$PATH":~/bin

# Homebrew Git
[[ -d /usr/local/git/bin && ! $PATH =~ '/usr/local/git/bin' ]] && export PATH=/usr/local/git/bin:$PATH

# Homebrew Bin
export PATH=${PATH//:\/usr\/local\/bin/}
[[ ! $PATH =~ '/usr/local/bin' ]] && export PATH=/usr/local/bin:$PATH
[[ ! $PATH =~ '/usr/local/sbin' ]] && export PATH=/usr/local/sbin:$PATH

# RVM Bin
if [[ ! '.rvm/bin' =~ $PATH ]]; then
  export PATH=$PATH:$HOME/.rvm/bin
fi

# RVM Gem Error
#export GEM_BASE=${GEM_HOME//@[a-zA-Z0-9]*/}
#[[ $GEM_BASE != $GEM_HOME && -d $GEM_BASE/bin ]] && export PATH=$GEM_BASE/bin:$PATH

# RVM Load Gem Bin
[[ -d $GEM_HOME/bin && ! $PATH =~ $GEM_HOME/bin ]] && export PATH=$GEM_HOME/bin:$PATH

# Apple Command Line
[[ -d /Developer/usr/bin && ! $PATH =~ /Developer/usr/bin ]] && export PATH=$PATH:/Developer/usr/bin

# MySQL Native Install
[[ -d /usr/local/mysql/support-files && ! $PATH =~ /usr/local/mysql/support-files ]] && export PATH=$PATH:/usr/local/mysql/support-files
[[ -d /usr/local/mysql/bin && ! $PATH =~ /usr/local/mysql/bin ]] && export PATH=$PATH:/usr/local/mysql/bin

# Kriogenx Bin
export PATH=$PATH:"$kriogenx_dir"/scripts/bin

# Xcode Developer
#if [[ -e /Applications/Xcode.app/Contents/Developer ]]; then
  #export PATH=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin:/Applications/Xcode.app/Contents/Developer/usr/bin:$PATH
#fi

# =========================
# PIMP MY SHELL

# ZSH SETTINGS
if [ -n "$ZSH_VERSION" ]; then
  # ZSH THEME
  if [[ -d ~/.oh-my-zsh ]]; then
    # Disable Updating entirely
    #DISABLE_UPDATE_PROMPT=true
    DISABLE_AUTO_UPDATE=true

    # ZSH rvm theme support
    [[ -e ~/.rvm/scripts/rvm ]] && source ~/.rvm/scripts/rvm

    ZSH=$HOME/.oh-my-zsh # oh-my-zsh config
    ZSH_CUSTOM="$kriogenx_dir"/scripts/configs
    ZSH_THEME="kriogenx" # ~/.oh-my-zsh/themes/

    #plugins=(git rvm fasd rake rails) # ~/.oh-my-zsh/custom/plugins/
    plugins=(git rvm fasd) # ~/.oh-my-zsh/custom/plugins/
    source $ZSH/oh-my-zsh.sh
  fi

  # Remove Autocorrect
  unsetopt correct_all
  unsetopt correctall
  unsetopt correct

  # Enable Help
  [[ `which run-help` =~ 'aliased to' ]] && unalias run-help
  autoload run-help
  HELPDIR=/usr/local/share/zsh/helpfiles

# Bash
elif [ -n "$BASH_VERSION" ]; then

  function rvm_prompt_info() {
    if [[ -e ~/.rvm/bin/rvm-prompt ]]; then
      ruby_version=$(~/.rvm/bin/rvm-prompt 2> /dev/null) || return
      [[ ! -z $ruby_version ]] && echo -en "\033[0m <$ruby_version>"
    fi
  }

  function git_prompt_info() {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    branch=${ref#ref/heads/}
    echo -en " \033[0m""${ref#refs/heads/}" #$(parse_git_dirty)"
    if [[ -n $(git status -s ${SUBMODULE_SYNTAX}  2> /dev/null) ]]; then
      echo -en "\033[31m✘✘✘"
    else
      echo -en "\033[32m✔"
    fi
  }

  bind '"\ep": history-search-backward'
  bind '"\en": history-search-forward'
  bind '"\C-w": backward-kill-word'

  # Colorize Prompt
  [ -z "$PS1" ] || stty -ixon

  # Kriogenx Theme
  [ -z "$PS1" ] || export PS1="╭─ \[\033[01;36m\]\w\[\033[00m\]\$(git_prompt_info '(%s)')\$(rvm_prompt_info)\033[0m\n╰─ "
fi

# ====================
# ALIASES

# Traversing
alias l='ls -l'
alias ll='ls -l'
alias la='ls -lAh'   #Show all, sort by extension
alias lll='ls -lAh'
alias lt="ls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'"
alias ltl="lt | less"

# Search Directory
lss() {
  [[ -n $1 ]] && la | grep $1 || la
}

cl() {
  cd $1; ls -l
}
mkd() {
  mkdir -p $1
  cd $1
}
alias ds='du -d 1 | sort -n'
si() {
  cd "$HOME/Sites/$1"
}

# Common Binaries
alias o='open'
alias oo='open .'
alias c='clear'
alias lns="ln -s"
alias bashcommands="bind -p | sed '/self.insert/d;/^#/d;/do-lowercase/d'"
alias v='vim'
alias vi='vim'
alias svi='sudo vim'
alias rmf='rm -rfv'
alias srmf='sudo rm -rf'
alias tailf='tail -f'

# Move & Create Directory
mvd() {
  mkdir -p $2; mv $1 $2
}
grp() {
  grep -irn $1 . --color=auto --exclude="*~"
}
egrp() {
  egrep -rn $1 .
}
fnd() {
  find . -name "*$1*"
}

# Print Path
alias ppath='echo $PATH | tr ':' "\n"'

# Processes
psa() {
  if [[ -z $1 ]]; then
    ps aux
  else
    ps aux | grep $1 | grep -v grep
  fi
}
killps() {
  kill -9 `psa $1 | awk '{print $2}'`
}

# tar compress
tarc() {
  a=${1%.*}'.tar.gz'
  /usr/bin/tar cvf $a $1 ;
}

# rsync
alias rnc='rsync -avu --stats --progress --exclude ".svn" --exclude ".git" --exclude ".DS_Store"'
# copy sync
cps() {
  rnc -z "${1%.*}"/ "$2"
}
# move sync
mvs() {
  rnc --remove-source-files "${1%.*}"/ "$2"
}
rncmirror() {
  rnc -z --delete "${1%.*}"/ "$2"
}

# Web Server
alias hosts="sudo vi /etc/hosts"
alias ports='netstat -tulanp'
webports() {
  ps auxwww | grep LISTEN
  netstat -a | egrep 'Proto|LISTEN'
  #lsof -i tcp:80
  #lsof -i tcp:8080
  #lsof -i tcp:3000
  lsof -wni tcp
}
alias wsports='webports'

# TextEdit
alias edi='open -e "$1"'

# SSH
sshcopy() {
  if [[ -e ~/.ssh/id_rsa.pub ]]; then
    pbcopy < ~/.ssh/id_rsa.pub
    echo "Copied ssh key into clipboard"
  else
    echo "SSH key could not be found"
  fi
}
alias sshconfig="vi ~/.ssh/config"

# Dropbox
alias dropboxpurge="rm -rf ~/Dropbox/.dropbox.cache; echo Dropbox cache deleted"

# Vagrant
alias vagu='vagrant up'
alias vagd='vagrant destroy -f'

# ===================
# RUBY & RAILS

alias rb='ruby'
alias rrvm='vi .rvmrc'
alias rcuc='cd `rr`; cucumber features'
alias rversions="gem list -ra rails | grep 'rails ('"
alias rgems='rvm list gemsets; cat .rvmrc'
alias rgemsdir='cd `rvm gemdir`/gems'
alias rvdgems='rvm gemset empty'
alias rgem='vi `rr`/Gemfile'
rinstall() {
  if [[ -n $1 ]]; then
    rvm install $1
    cd -; cd -
    gem install bundler
    bundle install
  else
    echo 'Must supply ruby version'
  fi
}
rgemsuninstall(){
  #gem list | cut -d" " -f1 | xargs gem uninstall -aIx
  for i in `gem list --no-versions`; do
    gem uninstall -aIx $i;
  done
}
alias rgembuild='gem pristine --all --no-extensions'
alias rlog='tail -f `rr`/log/development.log'
alias rtlog='tail -f `rr`/log/test.log'
# Rails Root
rr() {
  (
    dir=${1:-$(pwd)}
    i=0
    while [ "/" != "$dir" -a "$i" -ne 16 ]; do
      if [ -f "$dir/config/environment.rb" ]; then
        echo "$dir"
        return 0
      fi
      dir="$(dirname "$dir")"
      i=$(expr $i + 1)
    done
    return 1
  )
}
rsc() {
  if [[ -f "`rr`/script/rails" ]]; then
    `rr`/script/rails console
  elif [[ -f "`rr`/script/console" ]]; then
    `rr`/script/console
  else
    rails c
  fi
}
rss() {
  if [[ -f "`rr`/script/rails" ]]; then
    S="rails server"
  elif [[ -f "`rr`/script/server" ]]; then
    S="`rr`/script/server"
  else
    S="rails s"
  fi
  if [[ -n $1 ]]; then
    eval "$S -p '$1'"
  else
    eval "$S"
  fi
}
alias rss1='rss 3001'
alias rss2='rss 3002'
alias rss3='rss 3003'

alias bex="bundle exec"

[[ `which rake` =~ 'aliased to _rake_command' ]] && unalias rake

# cake
alias cake='app/Console/cake'

# vendor apps
alias tiga='tig --all'
alias tigs='tig status'

# apache
alias asites='sudo vi /etc/apache2/extra/httpd-vhosts.conf; sudo vi /etc/hosts; sudo apachectl restart'
alias adsites='sudo vi ~/Dropbox/Office/settings/apache/sites.conf; sudo vi /etc/hosts; sudo apachectl restart'
alias astart='sudo apachectl restart'
alias astop='sudo apachectl stop'
alias alog="tail -f /private/var/log/apache2/error_log"

# Nginx
alias ngsites='vi /usr/local/etc/nginx/nginx.conf'
alias ngstart='sudo nginx'
alias ngstop='sudo nginx -s quit'

# mysql
[[ `which mysql` =~ 'aliased to nocorrect' ]] && unalias mysql
alias mys='mysql.server start'
alias myr='mysql.server restart'
alias myq='mysql.server stop'

# cucumber
alias cuc='cucumber --format pretty -v'
alias cucb='bex cucumber --format pretty -v'
alias cucs='RAILS_ENV=cucumber rss1'
cucf() {
  if [[ -n "$1" ]]; then
    cucb "features/""${1/\.feature/}"".feature"
  else
    ls features | grep ".feature"
  fi
}

# postgres
#alias pg-start='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
#alias pg-stop='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
alias pgstart='pg_ctl start'
alias pgstop='pg_ctl stop'
pgenv() {
  echo "PGDATA:    $PGDATA"
}

# git
alias ga='git add -A .; git add -v .; git status'
alias gar='git reset HEAD'
alias gai='git add -i; git status'
alias gap='git add -p'

alias gc='git commit -v -m'
alias gca='git commit --amend'

alias gcl="git clone"
alias gco="git checkout"
# Git Checkout (removing remote/origin)
alias go="git checkout"
gor() {
  git checkout `echo $1 | sed 's/remotes\/origin\///g'`
}
# Checkout first branch that matches search
gos() {
  git checkout `git branch -a | grep $1 | sed 's/remotes\/origin\///g' | head -n1`
}
alias gom="git checkout master"
alias gol="git checkout @\{-1\}" # checkout last branch
gob() { # go back a branch
  git checkout @\{-"$1"\}
}
alias gb='git branch'
# Show Branches in order
gbb() {
  for k in $(git branch | sed /\*/d); do
    echo "$(git log -1 --pretty=format:"%ct" $k) $k"
  done | sort -r | awk '{print $2}'
}
alias gbd='git branch -d' # delete
alias gbdd='git branch -D' # delete!
# delete remote
gbdr() {
  git push origin ":$1"
}
# delete all
gbda() {
  gbd $1; gbdr $1
}
alias gbp='git prune -v'
alias gbpr='git remote prune origin'

alias gba='git branch -a' # all branches
alias gbr='git branch -r' # remote branches
# Search Branches
alias gbs='git branch -a | grep' # search branches
alias gbc="git branch --no-color | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'" # branch current

alias gbm="git branch --merged"
alias gbnm="git branch --no-merged"
alias gbdm='git branch --merged master | grep -v "\*" | xargs -n 1 git branch -d' # delete all merged branches
alias gbrm="git branch -r --merged master | sed 's/^  origin\///g'" # Remote Branches already merged to master
alias gbrnm="git branch -r --no-merged master | sed 's/^  origin\///g'" # show unmerged branches
gbrdm(){
  for i in `git branch -r --merged master | sed 's/^  origin\///g'`; do
    if [[ $i != 'master' && $i != 'HEAD' && $i != '->' && $i != 'origin/master' ]]; then
      gbdr $i;
    fi
  done
}

alias gbo='git checkout -b'
gbu() {
  gbo "$1"
  git push -u origin "$1"
}
gbt() {
  git branch -t "$1" origin/"$1"; #origin/"$1";
  git checkout "$1"
}

alias gtg='git tag'
alias gts='git show'
alias gtp='git push --tags'
alias gtd='git tag -d'
gtdr() { # DELETE REMOTE TAG
  git push origin :refs/tags/$1
}
gtda() {
  gtd $1
  gtdr $1
}

# status / diffs
alias gs='git status'
alias gd='git diff'
alias gds='git diff --staged'
alias gdc='git diff --cached'
alias gad='ga; gds'
alias gdl="git show" # diff last changes
alias gdh='git diff HEAD'
alias gdm='git diff master'
alias gsha='git log | head -1'

# logging - glo
alias glod='git log --oneline --decorate'
alias glop='git log -p'
alias glol='git log --graph --decorate --pretty=oneline --abbrev-commit'
alias glola='git log --graph --decorate --pretty=oneline --abbrev-commit --all'
alias glodd='git log --pretty=format:"%h%x09%an%x09%ad%x09%s"'
alias glodr='git log --pretty=format:"%h%x09%an%x09%ad%x09%s" --date=relative'
alias gbl='glop master..`gbc`' # See a branch's commits
alias gls='git ls-files'
alias glgn='ls-files -o -i --exclude-standard' # Show files ignored by git:
alias glc="git cherry -v master" #show changes in branch not merged
alias gcp="git cherry-pick"

# git push/pull
alias gp='git push'
alias gpa='git push --all'
alias gpu='git push -u'
alias gpo='git push -u origin `gbc`'
alias gl='git pull'
alias gla='git pull -v --all'
glu() {
  git branch --set-upstream $1 "origin/$1"
}
alias glr='git pull --rebase'
alias glm="gom; gl; gol; gl"
alias gr='git rebase'
alias grc='git rebase --continue'
alias grc='git rebase --skip'
alias gra='git rebase --abort'
alias gnc='glr; gp'

# Git Stashes
alias gst='git stash show'
alias gstl='git stash list'
alias gsd='git stash drop'
alias gss='git stash save'
alias gsa='git stash apply'
alias gsad='git stash apply; git stash drop'
alias gsc='git stash clear'
alias gsn='ga; gss; glr; gsa'

alias gm='git merge'
alias gmt='git mergetool'
alias gmf='git merge --no-commit --no-ff -v'
alias gmm='git merge master'

# ignore file
alias gig="vi .gitignore"
alias gigi="git update-index --assume-unchanged" # then filename, used for ignoring changes to a file locally
alias gigu="git update-index --no-assume-unchanged" # then filename, used for ignoring changes to a file locally

alias gr='git revert'
alias gcundo='git reset --hard HEAD~1' # undo last commit
alias gsundo=' git reset --soft HEAD^'
alias grundo='git revert HEAD~1 -n' #undo commit changes, leaving commit alone
gundo() {
  if [ ! $1 -gt 1 ]; then $1=1; fi
  git revert -n HEAD~r$1
}

# Git Submodules
alias gsm='git submodule add'
alias gsl='git submodule foreach git pull origin master'
alias gsu="git submodule update --init; git submodule update"

alias gclr='ga; git checkout -f'
alias gconf='vi .git/config'
alias ggconf='vi ~/.gitconfig'
alias gfix='git gc; git remote prune origin; git repack; git fsck --full --progress'

gsearch() {
  git grep $1 $(git rev-list --all)
}
gitpermanentfiledelete() {
  git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch $1' --prune-empty --tag-name-filter cat -- --all
}

# Remove Garbage Files
cleandir() {
  #find . -name '.svn' -type d -print0 | xargs -0 -t rm -rf
  find . -name '_notes' -type d -print0 | xargs -0 -t rm -rf
  find . -name '_vti_cnf' -type d -print0 | xargs -0 -t rm -rf
  find . -name '.DS_Store' -print0 | xargs -0 -t rm -rf
  find . -name '.BridgeCache' -print0 | xargs -0 -t rm -rf
  find . -name '.BridgeCacheT' -print0 | xargs -0 -t rm -rf
}

# GetSpace
getspace() {
  brew cleanup
  #sudo rm -rf /.Spotlight-V100
  [[ -e ~/Library/Caches/Adobe/"Bridge CS6"/Cache ]] && sudo rm -rf ~/Library/Caches/Adobe/"Bridge CS6"/Cache/*
  [[ -e ~/Library/Caches/com.spotify.client/Storage ]] && sudo rm -rf ~/Library/Caches/com.spotify.client/Storage
  [[ -e ~/Library/Caches/Google/Chrome ]] && sudo rm -rf ~/Library/Caches/Google/Chrome
}

# go up directories looking for $1
dirup() {
  dir=${1:-$(pwd)}
  i=0
  while [ "/" != "$dir" -a "$i" -ne 16 ]; do
    if [ -f "$dir/$1" ]; then
      echo "$dir"
      return 0
    fi
    dir="$(dirname "$dir")"
    i=$(expr $i + 1)
  done
  return 1
}

# SET LAST DIR
lastdir()
{
  rm ~/.lastdir
  pwd > ~/.lastdir
}
# CD LAST DIR
cdl() {
  [[ -e ~/.lastdir ]] && cd `cat ~/.lastdir`
}

# Services
services() {
  kextstat -kl | awk '!/com\.apple/{printf "%s %s\n", $6, $7}'
  sudo launchctl list | sed 1d | awk '!/0x|com\.(apple|openssh|vix\.cron)|org\.(amav|apac|cups|isc|ntp|postf|x)/{print $3}'; echo; sudo launchctl getenv DYLD_INSERT_LIBRARIES; echo; sudo defaults read com.apple.loginwindow LoginHook; echo; sudo crontab -l
  launchctl list | sed 1d | awk '!/0x|com\.apple|org\.(x|openbsd)/{print $3}'; echo; launchctl getenv DYLD_INSERT_LIBRARIES; echo; crontab -l
  ls -A /e*/{cr,la,mach}* {,/}Lib*/{Ad,Compon,Ex,Fram,In,Keyb,La,Mail/Bu,P*P,Priv,Qu,Scripti,Servi,Spo,Sta}* L*/Fonts .la*
  osascript -e 'tell application "System Events" to get name of login items'
}


# Kriogenx
alias krc='vi "$kriogenx_rc"; source "$kriogenx_rc"'
alias urc='vi "$user_rc"; source "$user_rc"'
alias kd='cd "$kriogenx_dir"'
alias kds='cd "$kriogenx_dir"/scripts'
alias kgig='cp "$kriogenx_dir"/scripts/support/git/gitignore ./.gitignore'
kup() {
  k up
}

[[ -e "$user_rc" ]] && source "$user_rc"

