#!/bin/bash
#!/usr/bin/env sh

A_SITES=(~/Sites/*)

help(){
  msg "Kriogenx" y
  echo 'useage: k [appname] <command>'
  echo ''
  msg 'Commands:' y
  echo '  update'
  echo ''
  msg 'Apps:' y
  echo '  apache [command]'
  echo '  mysql [command]'
  echo '  nginx [command]'
  echo '  postgres [command]'
  echo ""
  msg "App Commands generally include:" y
  echo '  s, start'
  echo '  r, restart'
  echo '  q, stop'
  echo '  h, help'
  echo '  c, config'
  echo '  t, status'
  echo ''
}

status() {
  msg Kriogenx y
  echo "For help, type 'k h'"
  echo ""
  if [[ `k apache i` == "true" ]]; then
   echo "Apache                "`k apache t`
  fi
  if [[ `k nginx i` == "true" ]]; then
   echo "Nginx                 "`k nginx t`
  fi
  if [[ `k mysql i` == "true" ]]; then
   echo "Mysql                 "`k mysql t`
  fi
  if [[ `k postgres i` == "true" ]]; then
   echo "Postgres              "`k postgres t`
  fi
}


apache(){
  case "$2" in
    s|start)
      sudo apachectl restart;
      msg "Apache Started" g
      ;;
    r|restart)
      sudo apachectl restart;
      msg "Apache Restarted" g
      ;;
    q|quit|stop)
      sudo apachectl stop;
      msg "Apache Stopped" y
      ;;
    sites)
      if [[ -f ~/Dropbox/Office/settings/apache/sites.conf ]]; then
        sudo vi ~/Dropbox/Office/settings/apache/sites.conf;
      else
        sudo vi /etc/apache2/extra/httpd-vhosts.conf;
      fi
      sudo vi /etc/hosts;
      sudo apachectl restart;
      ;;
    c|config)
      vi /etc/apache2/httpd.conf;
      ;;
    d|doctor|check)
      httpd;
      ;;
    l|log)
      tail -f /private/var/log/apache2/error_log;
      ;;
    t|status)
      APACHE_STATUS=`ps ax | grep /usr/sbin/httpd | grep -v grep | cut -c1-5 | paste -s -`;
      echo -n "Apache is "
      if [[ -n $APACHE_STATUS ]]; then
        msg "running" g
        echo $APACHE_STATUS
      else
        msg "not running" r
      fi
      ;;
    i|installed)
      [[ -n `which apachectl` ]] && echo "true" || echo "false"
      ;;
    *)
      msg "a - apache" w o
      echo "  s | start          Start Apache"
      echo "  q | quit           Stop Apache"
      echo "  r | restart        Restart Apache sites"
      echo "  t | status         Apache running status"
      echo "  sites              Edit Sites file, then hosts file"
      echo "  c | config         Edit configuration file"
      echo "  l | log            Apache log"
      ;;
  esac
}

mysql(){
  case "$2" in
    s|start)
      mysql.server start;
      ;;
    r|restart)
      mysql.server restart;
      ;;
    q|quit|stop)
      mysql.server stop;
      ;;
    i|installed)
      [[ -n `which mysql.server` ]] && echo "true" || echo "false"
      ;;
    t|status)
      if [[ -e /etc/init.d/mysql ]]; then
        /etc/init.d/mysql status
      elif [[ -e /etc/init.d/mysqld ]]; then
        /etc/init.d/mysqld status
      #elif [[ ! `service mysql` =~ 'not found' ]]; then
      #  service mysqld
      else
        mysql.server status
      fi
      ;;
    *)
      msg "m - mysql" w o
      echo "  s | start          Start MySQL"
      echo "  r | restart        Restart MySQL"
      echo "  q | quit           Stop MySQL"
      ;;
  esac
}

postgres(){
  case "$2" in
    s|start)
      pg_ctl start;
      ;;
    q|quit|stop)
      pg_ctl stop
      ;;
    t|status)
      echo "PGDATA:    $PGDATA"
      ;;
    i|installed)
      [[ -n `which pg_ctl` ]] && echo "true" || echo "false"
      ;;
    *)
      echo "\e[0;36mp - postgres\e[0m"
      echo "  s | start          Start"
      echo "  q | stop | quit    Stop"
      ;;
  esac
}

nginx(){
  case "$2" in
    s|start)
      result=`sudo nginx`;
      if [[ -z $result ]]; then
        echo 'NGINX started'
      else
        echo 'NGINX failed to start'
      fi
      ;;
    q|quit|stop)
      result=`sudo nginx -s quit`;
      if [[ -z $result ]]; then
        echo 'NGINX quit'
      else
        echo 'NGINX failed to quit'
      fi
      ;;
    c|conf|config)
      vi /usr/local/etc/nginx/nginx.conf
      ;;
    i|installed)
      [[ -n `which nginx` ]] && echo "true" || echo "false"
      ;;
    t|status)
      [[ -n `ps aux | grep nginx | grep -v grep` ]] && echo "Running" || echo "Not running"
      ;;
    *)
      echo "\e[0;36mn - nginx\e[0m"
      echo "  s | start          Start"
      echo "  q | quit           Stop"
      echo "  c | config         Edit Config file"
      ;;
  esac
}

update() {
  msg "Kriogenx" w o n; msg " - " n; msg "Updating..." y
  echo -n "$(cd ~/Sites/kriogenx/scripts; git pull --rebase -q)"
  # RVM
  if [[ -n `which rvm` ]]; then
    rvm_latest=`curl -s https://raw.github.com/wayneeseguin/rvm/stable/VERSION`
    rvm_current=`rvm --version | tr -d '\n'`
    rvm_current=${rvm_current//rvm\ /}
    rvm_current=${rvm_current//\ */}
    msg "RVM" w o n; msg " - Latest: " n; msg "$rvm_latest" y n; msg " - Current: " n; msg "$rvm_current" y n; msg " - " n
    if [[ -z $rvm_latest ]]; then
      msg "Could not get version" r
    elif [[ $rvm_latest != $rvm_current ]]; then
      msg "Upgrading..." y
      rvm get latest
    else
      msg "Already latest" g
    fi
  fi
  # Brew
  if [[ ! `type brew` =~ 'not found' ]]; then
    msg "Brew" w o n; msg " - " n; msg "Updating..." y
    brew update
    brew upgrade
    brew cleanup
  fi
  # OH MY ZSH
  if [[ -d ~/.oh-my-zsh ]]; then
    msg "OH-MY-ZSH" w o n; msg " - " n; msg "Updating..." y
    echo -n $(cd ~/.oh-my-zsh; git pull --rebase -q; git submodule foreach git pull origin master)
  fi
}

# Top Wrapper
case "$1" in
  # Apps
  a|apache) apache $@ ;;
  m|my|mysql) mysql $@ ;;
  n|ng|nginx) nginx $@ ;;
  p|pg|postgres) postgres $@ ;;
  # Commands
  h|help) help $@ ;;
  u|up|update|upgrade) update $@ ;;
  *) status ;;
esac
