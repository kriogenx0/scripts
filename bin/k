#!/bin/bash
#!/usr/bin/env sh

KRIO_DIR=~/.kriogenx
A_SITES=(~/Sites/*)
COMMAND=$1
VALUE=$2

psa() {
  if [[ -z $1 ]]; then
    ps aux
  else
    ps aux | grep $1 | grep -v grep
  fi
}

killps() {
  PROCESSES=`psa $1 | awk '{print $2}'`
  [[ -n $PROCESSES ]] && kill -9 $PROCESSES
}

help() {
  msg "Kriogenx" y
  echo 'useage: k [appname] <command>'
  echo ''
  msg 'Commands:' y
  echo '  update'
  echo ''
  msg 'Apps:' y
  echo '  apache [command]'
  echo '  mysql [command]'
  echo '  nginx [command]'
  echo '  postgres [command]'
  echo ""
  msg "App Commands generally include:" y
  echo '  s, start'
  echo '  r, restart'
  echo '  q, stop'
  echo '  h, help'
  echo '  c, config'
  echo '  t, status'
  echo ''
}

status() {
  msg Kriogenx y
  echo ""
  if [[ `k apache i` == "true" ]]; then
   echo "Apache                "`k apache t`
  fi
  if [[ `k nginx i` == "true" ]]; then
   echo "Nginx                 "`k nginx t`
  fi
  if [[ `k mysql i` == "true" ]]; then
   echo "Mysql                "`k mysql t`
  fi
  if [[ `k postgres i` == "true" ]]; then
   echo "Postgres              "`k postgres t`
  fi
  echo ""
  echo "For help, type 'k help'"
}


##################################
# SERVICES

apache(){
  case "$1" in
    s|start)
      sudo apachectl restart
      msg "Apache Started" g
      ;;
    r|restart)
      sudo apachectl restart
      msg "Apache Restarted" g
      ;;
    q|quit|stop)
      sudo apachectl stop
      msg "Apache Stopped" y
      ;;
    sites)
      if [[ -f ~/Dropbox/Office/settings/apache/sites.conf ]]; then
        sudo vi ~/Dropbox/Office/settings/apache/sites.conf
        sudo chown root:wheel ~/Dropbox/Office/settings/apache/sites.conf
      else
        sudo vi /etc/apache2/extra/httpd-vhosts.conf
        sudo chown root:wheel /etc/apache2/extra/httpd-vhosts.conf
      fi
      sudo vi /etc/hosts
      sudo apachectl restart
      ;;
    c|config)
      sudo vi /etc/apache2/httpd.conf
      ;;
    d|doctor|check)
      httpd;
      ;;
    l|log)
      tail -f /private/var/log/apache2/error_log
      ;;
    t|status)
      APACHE_STATUS=`ps ax | grep /usr/sbin/httpd | grep -v grep | cut -c1-5 | paste -s -`;
      echo -n "Apache is "
      if [[ -n $APACHE_STATUS ]]; then
        msg "running" g
        echo $APACHE_STATUS
      else
        msg "not running" r
      fi
      ;;
    i|installed)
      [[ -n `which apachectl` ]] && echo "true" || echo "false"
      ;;
    *)
      msg "a - apache" w o
      echo "  s | start          Start Apache"
      echo "  q | quit           Stop Apache"
      echo "  r | restart        Restart Apache sites"
      echo "  t | status         Apache running status"
      echo "  sites              Edit Sites file, then hosts file"
      echo "  c | config         Edit configuration file"
      echo "  l | log            Apache log"
      ;;
  esac
}

mysql(){
  case "$1" in
    s|start)
      mysql.server start;
      ;;
    r|restart)
      mysql.server restart;
      ;;
    q|quit|stop)
      mysql.server stop;
      ;;
    i|installed)
      [[ -n `which mysql.server` ]] && echo "true" || echo "false"
      ;;
    t|status)
      if [[ -e /etc/init.d/mysql ]]; then
        /etc/init.d/mysql status
      elif [[ -e /etc/init.d/mysqld ]]; then
        /etc/init.d/mysqld status
      #elif [[ ! `service mysql` =~ 'not found' ]]; then
      #  service mysqld
      else
        mysql.server status
      fi
      ;;
    *)
      msg "m - mysql" w o
      echo "  s | start          Start MySQL"
      echo "  r | restart        Restart MySQL"
      echo "  q | quit           Stop MySQL"
      ;;
  esac
}

nginx(){
  case "$1" in
    s|start)
      result=`sudo nginx`;
      if [[ -z $result ]]; then
        echo 'NGINX started'
      else
        echo 'NGINX failed to start'
      fi
      ;;
    q|quit|stop)
      result=`sudo nginx -s quit`;
      if [[ -z $result ]]; then
        echo 'NGINX quit'
      else
        echo 'NGINX failed to quit'
      fi
      ;;
    c|conf|config)
      vi /usr/local/etc/nginx/nginx.conf
      ;;
    i|installed)
      [[ -n `which nginx` ]] && echo "true" || echo "false"
      ;;
    t|status)
      [[ -n `ps aux | grep nginx | grep -v grep` ]] && echo "Running" || echo "Not running"
      ;;
    *)
      echo "\e[0;36mn - nginx\e[0m"
      echo "  s | start          Start"
      echo "  q | quit           Stop"
      echo "  c | config         Edit Config file"
      ;;
  esac
}

postgres(){
  case "$1" in
    s|start)
      pg_ctl start;
      ;;
    q|quit|stop)
      pg_ctl stop
      ;;
    t|status)
      echo "PGDATA:    $PGDATA"
      ;;
    i|installed)
      [[ -n `which pg_ctl` ]] && echo "true" || echo "false"
      ;;
    *)
      echo "\e[0;36mp - postgres\e[0m"
      echo "  s | start          Start"
      echo "  q | stop | quit    Stop"
      ;;
  esac
}

redis() {
  case "$1" in
    s|start)
      redis-server &
      ;;
    q|quit|stop)
      killps redis-server
      ;;
    *)
      echo "\e[0;36mr - redis\e[0m"
      echo "  s | start          Start"
      echo "  q | stop | quit    Stop"
      ;;
  esac
}


########################################
# PACKAGES

k_brew() {
  case "$1" in
    i|install)
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      ;;
    uninstall)
      cd `brew --prefix`
      git checkout master
      git ls-files -z | pbcopy
      rm -rf Cellar
      bin/brew prune
      pbpaste | xargs -0 rm
      rm -r Library/Homebrew Library/Aliases Library/Formula Library/Contributions 
      test -d Library/LinkedKegs && rm -r Library/LinkedKegs
      rmdir -p bin Library share/man/man1 2> /dev/null
      rm -rf .git
      rm -rf ~/Library/Caches/Homebrew
      rm -rf ~/Library/Logs/Homebrew
      rm -rf /Library/Caches/Homebrew
      ;;
    u|update)
      if [[ ! `type brew` =~ 'not found' ]]; then
        msg "Brew" w o n; msg " - " n; msg "Updating..." y
        brew update
        brew upgrade
        brew cleanup
      fi
      ;;
    *)
      msg "Homebrew" y
      echo "  i | install          Install Homebrew"
      echo "    | uninstall        Uninstall Homebrew"
      echo "  u | update           Update Homebrew"
  esac
}

k_rvm() {
  case "$1" in
    i|install)
      \curl -sSL https://get.rvm.io | bash
      sudo rvm cleanup all
      rvm requirements
      ;;
    uninstall)
      rvm implode
      ;;
    u|update)
      if [[ -n `which rvm` ]]; then
        rvm_latest=`curl -s https://raw.githubusercontent.com/wayneeseguin/rvm/stable/VERSION`
        rvm_current=`rvm --version | tr -d '\n'`
        rvm_current=${rvm_current//rvm\ /}
        rvm_current=${rvm_current//\ */}
        msg "RVM" w o n; msg " - Latest: " n; msg "$rvm_latest" y n; msg " - Current: " n; msg "$rvm_current" y n; msg " - " n
        if [[ -z $rvm_latest ]]; then
          msg "Could not get version" r
        elif [[ $rvm_latest != $rvm_current ]]; then
          msg "Upgrading..." y
          rvm get latest
        else
          msg "Already latest" g
        fi
      fi
      ;;
    *)
      msg "RVM" y
      echo "  i | install          Install RVM and Dependencies"
      echo "    | uninstall        Uninstall RVM"
      echo "  u | update           Update RVM"
  esac
}

k_composer() {
  case "$1" in
    u|update)
      if [[ -n `which composer` ]]; then
        msg "Composer" w o n; msg " - " n; msg "Updating..." y
        composer self-update
      fi
      ;;
  esac
}

###########################
# COMMANDS

update() {
  msg "Kriogenx" w o n; msg " - " n; msg "Updating..." y
  echo -n "$(cd "$KRIO_DIR"; git pull --rebase -q)"

  # RVM
  k_rvm u

  # Composer
  k_composer u

  # Brew
  k_brew u

  # OH MY ZSH
  if [[ -d ~/.oh-my-zsh ]]; then
    msg "OH-MY-ZSH" w o n; msg " - " n; msg "Updating..." y
    echo -n $(cd ~/.oh-my-zsh; git pull --rebase -q; git submodule foreach git pull origin master)
  fi
}

# Top Wrapper
case "$COMMAND" in

  # Services
  a|apache) apache $VALUE ;;
  m|my|mysql) mysql $VALUE ;;
  n|ng|nginx) nginx $VALUE ;;
  p|pg|postgres) postgres $VALUE ;;
  r|redis) redis $VALUE ;;

  # Packages
  composer) k_composer $VALUE ;;
  homebrew|brew) k_brew $VALUE ;;
  rvm) k_rvm $VALUE ;;

  # Commands
  h|help) help ;;
  u|up|update|upgrade) update ;;
  *) status ;;

esac

