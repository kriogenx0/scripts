#!/usr/bin/env ruby

# Forter
# Photo Organizer
# Version 2.0

# require 'optparse'
require 'pathname'
require 'fileutils'

# options = {
#   :abs => true,
# }
# parser = OptionParser.new do |opts|
#   opts.banner = "Usage: fix_oralib.rb [options] files..."
#
#   opts.on("-d", "--ic_dir=DIRECTORY",
#           "Sepcify Oracle instant client directory",
#           "(default: current directory or script directory)") do |dir|
#     options[:ic_dir] = File.expand_path('.', dir)
#   end
#   opts.on("-a", "--[no-]absolute-path",
#           "Use the absolute path of instant client directory instead of @rpath (default)") do |v|
#     options[:abs] = v
#   end
#   opts.on("-r", "--recursive",
#           "Apply all files under each directory, recursively") do |v|
#     options[:recursive] = v
#   end
#   opts.on("-n", "--[no-]dry-run",
#           "Perform a trial run with no changes made") do |v|
#     options[:dry_run] = v
#   end
# end
# parser.parse!



# files = ARGV
arg = ARGV[0]
file_path = if arg && File.exists?(arg)
  arg
else
  `pwd`.chomp
end

puts "Error: Not a directory: #{file_path.inspect}" and exit unless File.directory?(file_path.to_s)

#dir_name  = File.basename(file_path).downcase

files = Pathname.new(file_path).children.sort_by { |f| File.basename f }
# files = Dir.entries file_path
root_dir = File.dirname file_path

previous_dir = nil
files.each do |file|
  next if File.directory? file
  file_name = File.basename file
  next if file_name[0] == '.' || file_name[0] == '_'
  # puts file_name

  file_ext = File.extname(file).slice 1, 10

  # MOVE TO PREVIOUS FILES FOLDER
  if file_ext == 'xmp' && previous_dir && File.exist?(previous_dir)
    destination_dir = previous_dir
  else
    # Create Date Folder
    date = File.ctime file
    # date = File.mtime file
    date_folder = File.join root_dir, date.to_s[5..9]
    unless File.exists? date_folder
      FileUtils.mkdir date_folder
      puts "Folder created: #{date_folder}"
    end

    # Create File Type Folder
    ext_folder = File.join date_folder, file_ext
    unless File.exists? ext_folder
      FileUtils.mkdir ext_folder
      # puts "Folder created: #{ext_folder}"
    end

    destination_dir = ext_folder
  end

  # TODO Create Device Folder

  # Move File
  begin
    FileUtils.mv file, File.join(destination_dir, file_name)
  rescue
    puts "ERROR: Could no move file: #{file_name}"
  end

  previous_dir = destination_dir
end
