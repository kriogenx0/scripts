#!/usr/bin/env sh

# Mac OS X
if [[ `sw_vers` =~ 'Mac OS X' ]]; then

  # HomeBrew
  if [[ ! -d /usr/local ]]; then
    sudo mkdir -p /usr/local
  fi
  sudo chown -R `whoami` /usr/local
  if [[ -e /usr/local/bin/brew ]]; then
    brew update
  else
    ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)"
    brew doctor
  fi

  # Apple GCC
  if [[ ! -e /usr/local/bin/gcc-4.2 ]]; then
    brew install apple-gcc42
  fi
  brew tap homebrew/dupes

# Linux
else
  # Git
  sudo apt-get install git -yf
  # Curl
  sudo apt-get install curl -yf
fi

######################

# Git
if [[ `which git` =~ "usr/local" ]]; then
  brew upgrade git
else
  echo 'Installing git...'
  brew install git

  echo 'Your git Name and Email are not set up'
  echo 'It is recommended to configure your git name and email for git commits.'
  read -p "Configure name and email now? " configuregit
  case $configuregit in
    Y|y|yes )
      read -p "Enter your git name: " gitname
      [[ -n $a ]] && git config --global user.name "$gitname"

      read -p "Enter your email: " gitemail
      [[ -n $e ]] && git config --global user.email "$gitemail"
      break;;
    * )
      echo 'Skipping git user configuration.';;
  esac
fi



# Janus
if [[ ! `type ruby` =~ "not found" ]]; then
  if [[ -d ~/.vim/janus ]]; then
    echo `cd ~/.vim/janus; git pull`
  else
    read -p "Install Janus? y/n " install_janus

    case $install_janus in
      Y|y|yes )
        echo 'Install Janus...'
        curl -Lo- https://bit.ly/janus-bootstrap | bash
        break;;
    esac
  fi
else
  echo 'Janus - Latest Ruby required to install Janus'
fi

# Tig
if [[ ! `type tig` =~ "not found" ]]; then
  brew install tig
else
  brew upgrade tig
fi

# Xcode Select
if [[ -d "/Applications/Xcode.app/Contents" ]]; then
  sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
fi

# SSH
if [ ! -d ~/.ssh ]; then
  echo 'Looks like SSH is not set up.'
  echo 'SSH is used for git to connect to repositories.'
  read -p "Enter your email address: " a
  if [[ -n $a ]]; then
    ssh-keygen -t rsa -C "$a"
    ssh-add ~/.ssh/id_rsa
    pbcopy < ~/.ssh/id_rsa.pub;
    echo 'Testing SSH...'
    [[ `ssh -T git@github.com` =~ 'success' ]] && echo 'SSH Success!'
    echo 'Created SSH key and copied public key to clipboard'
  fi
fi

echo 'Developer Essentials complete'
