#!/usr/bin/env sh

# Settings
[[ -e $DROP_HOME ]] || DROP_HOME=~/Dropbox
DROP_OFFICE="$DROP_HOME"/Office
DROP_SETTINGS="$DROP_OFFICE"/settings

# TODO:
# GET -f param to recreate links

#################################
# INIT

if [[ ! -e /Applications/Dropbox.app ]] || [ ! -d $DROP_HOME ]; then
  echo 'Dropbox is required for this script'
  exit 0
fi

# Create Directories if they don't exist
mkdir -p "$DROP_SETTINGS"

#################################
# STATICS

msg() {
  printf "\033[36m$1\033[0m\n"
}

remove_if_broken_link()
{
  [[ `file "$1"` =~ 'broken' ]] && sudo rm -f "$1"
}

move_contents()
{
  `sudo mv "$1"/* "$2"/` >> /dev/null
  sudo rm -f "$1"
}

# create_link
# source, destination, duplicate-destination(optional)
create_link() {
  S="$1"
  D="$2"
  DD=

  remove_if_broken_link "$S"

  if [[ -L "$S" ]]; then
    echo 'Cannot create_link - link already exists'
    return 0
  fi

  # Make Dir
  mkdir -p `dirname "$D"`

  # Rename Files if Exist
  if [[ -e "$S" ]]; then
    # If destination exists
    if [[ -e "$D" ]]; then
      # Duplicate Directory
      [[ -n $3 ]] && DD="$3" || DD="$1"-old-`date "+%Y-%m-%d"`
      sudo mv "$S" "$DD"
    # If no destination exists
    else
      sudo mv "$S" "$D"
    fi
  else
    if [[ ! -e "$D" ]]; then
      echo "Neither of locations exist:"
      echo "Source: $S"
      echo "Destination: $D"
      return 0
    fi
  fi

  # Create Links
  echo -e "Created Link\n  From: $S\n  To: $D"
  sudo ln -s "$D" "$S"
}

move_and_create_link() {
  S="$1"
  D="$2"

  if [[ ! -L "$S" ]] && [[ -d "$S" ]] && [[ -d "$D" ]]; then
    sudo mv "$S"/* "$D"/ # Move contents if exist
    sudo rm -rf "$S"
  fi

  create_link "$S" "$D"
}

#################################
# WRAPPER

dropbox_takeover_help() {
  cat << EOF
a | all           All packages
d | desktop       Desktop
h | host Hosts file
i | iTunes
EOF
}

###########################################################################
# COMPONENTS
###########################################################################

#################################
# SSH

SSH_SRC=~/.ssh
SSH_DRP="$DROP_SETTINGS"/ssh

msg "SSH"
if [[ -L $SSH_SRC ]]; then
  read -p "SSH - Already syncing.  Recreate link? y|n " SSH_SYNC
  case $SSH_SYNC in
    Y|y|yes)
      sudo rm -rf $SSH_SRC
  esac
elif [[ ! -d $SSH_DRP ]]; then
  read -p "SSH - Move .ssh to Dropbox? y|n " SSH_SYNC
else
  SSH_SYNC=y
fi

case $SSH_SYNC in
  Y|y|yes)
    create_link "$SSH_SRC" "$SSH_DRP"
    sudo chmod 0600 ~/.ssh/id_rsa
esac

#################################
# Desktop

DESK_SRC=$HOME/Desktop
DESK_DRP="$DROP_OFFICE"/Desktop

msg "Desktop"
move_and_create_link "$DESK_SRC" "$DESK_DRP"
echo 'Desktop - Syncing'

#################################
# Documents

DOC_SRC=$HOME/Documents
DOC_DRP="$DROP_OFFICE"/Documents

msg "Documents"
move_and_create_link "$DOC_SRC" "$DOC_DRP"
echo 'Documents - Syncing'

#################################
# Hosts File

HOSTS_SRC=/etc/hosts
HOSTS_DRP="$DROP_SETTINGS"/hosts

msg "Hosts"
create_link "$HOSTS_SRC" "$HOSTS_DRP"
echo 'Hosts - Syncing'


#################################
# iTunes

ITUNES_SRC=~/Music/iTunes
ITUNES_DROP="$DROP_SETTINGS"/iTunes

msg "iTunes"
if [[ -e "$ITUNES_SRC" ]] && [[ ! -L "$ITUNES_SRC" ]]; then
  read -p "iTunes - sync? y|n " ITUNES_SYNC
  case $ITUNES_SYNC in
    Y|y|yes)
      $ITUNES_SYNC=y
  esac
fi

if [[ $ITUNES_SYNC = y ]]; then
  create_link "$ITUNES_SRC" "$ITUNES_DROP"
  echo 'iTunes - Syncing'
fi

#################################
# Filezilla

FZ_APP=/Applications/FileZilla.app
FZ_SRC=~/.filezilla
FZ_DRP="$DROP_SETTINGS"/Filezilla

msg "Filezilla"
if [ -e $FZ_APP ]; then
  create_link "$FZ_SRC" "$FZ_DRP"
  echo 'Filezilla - Syncing'
fi

#################################
# Cyberduck

CYBERDUCK_SRC=~/Library/Application\ Support/Cyberduck
CYBERDUCK_DRP=~/Dropbox/Office/settings/Cyberduck

msg "Cyberduck"
create_link "$CYBERDUCK_SRC" "$CYBERDUCK_DRP"
echo 'Cyberduck - Syncing'

defaults write ch.sudo.cyberduck application.support.path "$CYBERDUCK_DROP"


#################################
# Photoshop

if [[ -e /Applications/Adobe\ Photoshop\ CC ]]; then
  PS_V=CC
elif [[ -e /Applications/Adobe\ Photoshop\ CS6 ]]; then
  PS_V=CS6
elif [[ -e /Applications/Adobe\ Photoshop\ CS5 ]]; then
  PS_V=CS5
elif [[ -e /Applications/Adobe\ Photoshop\ CS4 ]]; then
  PS_V=CS4
fi

msg "Photoshop"
if [[ -n $PS_V ]]; then
  echo "Photoshop - Syncing"

  PS_FILES=("Actions Palette.psp" Brushes.psp Gradients.psp "Keyboard Shortcuts Primary.psp" "Keyboard Shortcuts.psp" "Menu Customization.psp" Patterns.psp Swatches.psp "Workspace Prefs.psp" WorkSpaces "WorkSpaces (Modified)"  )
  PS_PREFS=~/Library/Preferences/Adobe\ Photoshop\ "$PS_V"\ Settings/
  PS_PREFS_LENGTH=${#PS_PREFS[@]}
  PS_DROP=$DROP_SETTINGS/photoshop/Adobe\ Photoshop\ "$PS_V"\ Settings/

  mkdir -p "$PS_DROP"

  for PS_F in "${PS_FILES[@]}"; do
    f="$PS_PREFS""$PS_F"
    df="$PS_DROP""$PS_F"

    [[ -L "$f" ]] && rm -rf "$f"

    # If Dropbox File exists
    if [[ -e "$df" ]]; then

      # If Preference Exists
      if [[ -e "$f" ]]; then
        mv "$f" "$f"-old-`date "+%Y-%m-%d"`
      fi

    # If Dropbox File does not exist
    else
      # Move to Dropbox
      [[ -e "$f" ]] && mv "$f" "$df"
    fi

    # LINK DROPBOX
    [[ -e "$df" ]] && ln -s "$df" "$f"
    #echo "--- $df \n--> $f"

  done
  echo 'Photoshop - Success!'
fi

#################################
# Sequel Pro

SQ_APP=/Applications/"Sequel Pro.app"

msg "Sequel Pro"
if [[ -e "$SQ_APP" ]]; then
  SQ_DROPBOX=~/Dropbox/Office/settings/sequelpro

  if [[ ! -e "$SQ_APP"/Contents/Frameworks/BWToolkitFramework.framework ]]; then
    SQ_OLD=1
  fi

  if [[ -z $SQL_OLD ]]; then
    SQ_PREF=~/Library/"Application Support"/"Sequel Pro"
    SQ_DROPBOX_PREF=${SQ_DROPBOX}/"Sequel Pro"
  else
    SQ_PREF=~/Library/Preferences/com.google.code.sequel-pro.plist
    SQ_DROPBOX_PREF=${SQ_DROPBOX}/com.google.code.sequel-pro.plist
  fi

  [[ -d ${SQ_DROPBOX} ]] || mkdir -p ${SQ_DROPBOX}
  if [[ -L ${SQ_PREF} ]]; then
    sudo rm -rf ${SQ_PREF}
    #echo "Sequel Pro - removed link"
    SQ_RECREATED=1
  fi

  # Move Current Prefs if Exist
  if [[ -f ${SQ_DROPBOX_PREF} ]]; then
    if [[ -e ${SQ_PREF} ]]; then
      sudo mv ${SQ_PREF} ${SQ_DROPBOX_PREF}-old-`date "+%Y-%m-%d"`
    #else
      #sudo mv ${SQ_PREF} ${SQ_DROPBOX_PREF}
    fi
  else
    if [[ -f ${SQ_PREF} ]]; then
      sudo mv ${SQ_PREF} ${SQ_DROPBOX_PREF}
    fi
  fi

  # Create Link
  if [[ -e "${SQ_DROPBOX_PREF}" ]] && [[ ! -L "${SQ_PREF}" ]]; then
    ln -s "${SQ_DROPBOX_PREF}" "${SQ_PREF}"
    if [[ -n $SQ_RECREATED ]]; then
      echo "Sequel Pro - Link recreated"
    else
      echo 'Sequel Pro - Success!'
    fi
  fi
fi

#################################
# Adium

ADIUM_APP=/Applications/Adium.app

msg "Adium"
if [[ -e $ADIUM_APP ]]; then
  ADIUM_PREF=~/Library/Application\ Support/Adium\ 2.0/Users/Default
  ADIUM_DROP="$DROP_SETTINGS"/adium/Default
  #ADIUM_FILES=(Accounts.plist Confirmations.plist "Contact Alerts.plist" "Contact List Display.plist" "Detached Groups.plist" "Display Format.plist" "Event Presets.plist" General.plist libpurple/accounts.xml libpurple/certificates libpurple/logs libpurple/prefs.xml libpurple/xmpp-caps.xml Logging.plist Logs "Message Context Display.plist" otr.fingerprints OTR.plist otr.private_key "Saved Status.plist" Sorting.plist "Status Preferences.plist" "URL Handling Group.plist")
  ADIUM_FILES=(Accounts.plist Confirmations.plist "Contact Alerts.plist" "Contact List Display.plist" "Detached Groups.plist" "Display Format.plist" "Event Presets.plist" General.plist libpurple Logging.plist Logs "Message Context Display.plist" otr.fingerprints OTR.plist otr.private_key "Saved Status.plist" Sorting.plist "Status Preferences.plist" "URL Handling Group.plist")

  mkdir -p "$ADIUM_PREF"

  if [[ -L "$ADIUM_PREF"/Accounts.plist ]]; then
    read -p "Adium - Already syncing.  Recreate link? y|n " ADIUM_SYNC
    #case $SSH_SYNC in
    #  Y|y|yes)
        #sudo rm -rf $ADIUM_PREF
    #esac
  else
    ADIUM_SYNC=y
  fi

  # ACTION
  case $ADIUM_SYNC in
    Y|y|yes)
      for pref in "${ADIUM_FILES[@]}"; do
        if [[ "$pref" == *ByObjectPrefs* ]]; then
          continue
        fi

        f="$ADIUM_PREF"/"$pref"

        # Remove if alias
        if [[ -L $f ]]; then
          rm -rf "$f"
        #elif [[ -e $f ]]; then
        #  [[ -e "$f"-old ]] && rm -rf "$f"-old
        #  mv "$f" "$f"-old
        fi

        # Create alias
        [[ -e "$ADIUM_DROP" ]] && ln -s "$ADIUM_DROP"/"$pref" "$ADIUM_PREF"/"$pref"

      done
      echo 'Adium - Success!'
      ;;
    *)
      echo 'Adium - Cancelled'
      ;;
  esac

fi

#################################
# Apache

msg "Apache"
if ! grep -q `whoami`'/Dropbox' /private/etc/apache2/httpd.conf; then
  APACHE_SITES="/Users/"`whoami`"/Dropbox/Office/settings/apache/sites.conf"
  echo "\n# Load Dropbox Sites" | sudo tee -a /private/etc/apache2/httpd.conf
  echo "Include ${APACHE_SITES}" | sudo tee -a /private/etc/apache2/httpd.conf

  if [[ ! -f "$APACHE_SITES" ]]; then
    echo '################\n# Add sites here\n' | sudo tee -a "$APACHE_SITES"
  fi

  if [[ ! -e /etc/php.ini ]] || [[ -e "$DROP_SETTINGS"/apache/php.ini ]]; then
    cp /etc/php.ini.default "$DROP_SETTINGS"/apache/php.ini
  fi

  create_link "$DROP_SETTINGS"/apache/php.ini /etc/php.ini

  echo 'Apache - Success!'
else
  echo 'Apache - Already syncing'
fi

#################################
# Coda 2

if [[ -e /Applications/Coda\ 2.app ]]; then

  DESK_SRC=$HOME/Desktop
  DESK_DRP="$DROP_OFFICE"/Desktop

  move_and_create_link ~/Library/Application\ Support/Coda\ 2 "$DROP_SETTINGS"/Coda2/Application\ Support
  create_link ~/Library/Preferences/com.panic.Coda2.plist "$DROP_SETTINGS"/Coda2/com.panic.Coda2.plist
  create_link ~/Library/Preferences/com.panic.Coda2.LSSharedFileList.plist "$DROP_SETTINGS"/Coda2/com.panic.Coda2.LSSharedFileList.plist

  echo 'Coda 2 - Syncing'

fi
